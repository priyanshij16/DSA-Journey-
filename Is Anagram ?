PROBLEM : Given two strings s and t, return true if the two strings are anagrams of each other, otherwise return false.

An anagram is a string that contains the exact same characters as another string, but the order of the characters can be different.

BRUTE FORCE APPROACH : O(nlogn)
  1 Sort both the strings 
  2 then check if(s[i] !=S2[i])
  return false else true 


Optimised Approach : Frequency Array 
TC : o(n) O(1)
 bool isAnagram(string s, string t) {
        // APPROACH : Frequency array 
       if (s.length() != t.length()) {
            return false;
        }
    vector<int> count(26, 0);
        for (int i = 0; i < s.length(); i++) {
            count[s[i] - 'a']++;
            count[t[i] - 'a']--;
        }

        for (int val : count) {
            if (val != 0) {
                return false;
            }
        }
        return true;

    }
