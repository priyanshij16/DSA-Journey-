1 2 3 1 
o/p: 2 index 


Brute O(n)
int n= nums.size();
     for(int i=0; i<n; i++){
       if( (i==0 || nums[i] > nums[i-1]) && 
       (i==n-1 || nums[i] > nums[i+1]) )
       return i;
     }
     return -1;    

     -------------------------------------------------------------------------
     better by Binary searching :


     // Edge cases:
    if (n == 1) return 0;
    if (arr[0] > arr[1]) return 0;
    if (arr[n - 1] > arr[n - 2]) return n - 1;

    int low = 1, high = n - 2;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid - 1] < arr[mid] && arr[mid] > arr[mid + 1])
            return mid;

        // If we are in the left:
        if (arr[mid] > arr[mid - 1]) low = mid + 1;

        else high = mid - 1;
    }
    return -1;
